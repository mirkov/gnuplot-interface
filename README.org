#+TITLE: =gnuplot=-interface package

* Package features
Low level interface to =gnuplot= that provides:
- start of =gnuplot= process
- passing raw =gnuplot= commands
- echo printing of sent commands 

* Example of use
  Typical usage:
#+BEGIN_SRC lisp
(start-gnuplot) ;; starts the process
(init-gnuplot) ;; optional, to initializes terminal
(hello-world) ;;  test output
(command "command-string") ;; send command to gnuplot
(echo-command) ;; sell last sent command
#+END_SRC

  For passing complex =gnuplot= commands that consists of many lines,
  use the =send-line= and =send-line-break= commands
#+BEGIN_SRC lisp
(do-stuff (action actions)
   (send-line (action->string action)))
(sent-line-break)
#+END_SRC

* Platforms
  The interface was developed and tested on the following platforms
  - Linux & =SBCL=
  - Windows & Cygwin & CLISP
    - =gnuplot=
    - =wgnuplot=
  
* Cygwin and =wgnuplot=
  For use of Cygwin and =wgnuplot=, one needs to provide the feature
  =:wgnuplot=.  Furthermore, one needs to specify the path to the
  ~gnuplot.exe~ console executable.  This is done via =:wgnuplot='s
  property list:
#+BEGIN_SRC lisp
(setf (symbol-plist :wgnuplot)
   (list :executable "posix compliant path to executable"))
#+END_SRC
For example, the path can be:
#+BEGIN_QUOTE
"/c/Program\\ Files/wgnuplot/bin/gnuplot.exe"
#+END_QUOTE

The ~:wgnuplot~ p-list has to be set-up prior to loading
~gnuplot-interface~.  The executable path has to be enclosed in quotes
because of the space.  The double backslash is not sufficient.

If the path is changed during a lisp session, the ~*executable*
variable has to be set to the new path.

* Caveats
- stream plumbing is not thoroughly tested
- windows management is not implemented

* To do
  - multiple windows management
  - Figure out how to use clisp's =ext:run-program= instead of
    =ext:make-pipe-io-stream=
    - That would allow me to use the =external-program= package
